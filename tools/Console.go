package tools

import (
	"bufio"
	"fmt"
	animals "main/Animals"
	"main/abstraction"
	db "main/bd"
	"os"
	"strconv"
	"strings"
)

var items []MenuItem
var scanner *bufio.Scanner

func init() {
	scanner = bufio.NewScanner(os.Stdin)
}

func WriteConsole() {
	if items == nil {
		items = ReadFile("ru")
	}

	for {
		showMenu()
		choice := getUserChoice()

		if choice == len(items)+1 {
			fmt.Println("\n‚ùå –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
			break
		}

		if choice > 0 && choice <= len(items) {
			SearchFunction(items[choice-1].Key)
		} else {
			fmt.Println("\n‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}
	}
}

func showMenu() {
	fmt.Println("\n================ZOO================")
	for i, item := range items {
		fmt.Printf("%d) %s\n", i+1, item.Text)
	}
	fmt.Println("====================================")
}

func getUserChoice() int {
	fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ")
	scanner.Scan()
	input := scanner.Text()

	choice, err := strconv.Atoi(strings.TrimSpace(input))
	if err != nil {
		return -1
	}
	return choice
}

func SearchFunction(keyFunction string) {
	switch keyFunction {
	case "add":
		GetAnimal()
	case "allAnimal":
		fmt.Println("\nüìã –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
		waitForEnter()
	case "handAnimal":
		fmt.Println("\nüê∞ –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
		waitForEnter()
	case "allZoo":
		fmt.Println("\nüìö –§—É–Ω–∫—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–æ–æ–ø–∞—Ä–∫–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
		waitForEnter()
	case "changeLanguage":
		changeLanguage()
	case "exit":
		os.Exit(0)
	default:
		fmt.Println("\n‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
		waitForEnter()
	}
}

func changeLanguage() {
	fmt.Println("\nüåê –°–º–µ–Ω–∞ —è–∑—ã–∫–∞")
	fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: ru, en, ch")
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫: ")

	scanner.Scan()
	language := strings.TrimSpace(scanner.Text())

	newItems := ReadFile(language)
	if newItems != nil {
		items = newItems
		fmt.Printf("‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '%s'\n", language)
	} else {
		fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫ '%s'. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π.\n", language)
	}
	waitForEnter()
}

func AddAnimal() {
	fmt.Println("\nüêí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ")

	foodAmount := GetValidFood()
	if foodAmount <= 0 {
		fmt.Println("‚ùå –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ")
		return
	}

	fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥—ã: %d\n", foodAmount)

	waitForEnter()
}

func waitForEnter() {
	fmt.Print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
	scanner.Scan()
}

func GetName() string {
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ")
	scanner.Scan()
	return scanner.Text()
}

func GetValidFood() int {
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥—ã: ")
	scanner.Scan()
	input := scanner.Text()
	value, err := strconv.Atoi(strings.TrimSpace(input))
	if err != nil || value <= 0 {
		fmt.Println("‚ùå –ù–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
		return 0
	}
	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
	waitForEnter()
	return value
}

func GetFriendless() int {
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏: ")
	scanner.Scan()
	input := scanner.Text()
	value, err := strconv.Atoi(strings.TrimSpace(input))
	if err != nil || value < 0 || value > 10 {
		fmt.Println("‚ùå –ù–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
		return 0
	}
	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
	waitForEnter()
	return value
}

func GetAnimal() abstraction.IALive {
	fmt.Println("\nüêí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ")
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–û–±–µ–∑—å—è–Ω–∞, –¢–∏–≥—Ä, –í–æ–ª–∫, –ö—Ä–æ–ª–∏–∫): ")
	scanner.Scan()
	switch scanner.Text() {
	case "–û–±–µ–∑—å—è–Ω–∞":
		food := GetValidFood()
		friend := GetFriendless()
		name := GetName()
		db.SaveAnimal(name, "–û–±–µ–∑—å—è–Ω–∞", food, friend, 0)
		return animals.NewMonkey(name, food, friend)

	case "–¢–∏–≥—Ä":
		food := GetValidFood()
		name := GetName()
		db.SaveAnimal(name, "–¢–∏–≥—Ä", food, 0, 0)
		return animals.NewTiger(name, food, 0)

	case "–í–æ–ª–∫":
		food := GetValidFood()
		name := GetName()
		db.SaveAnimal(name, "–í–æ–ª–∫", food, 0, 0)
		return animals.NewWolf(name, food, 0)

	case "–ö—Ä–æ–ª–∏–∫":
		food := GetValidFood()
		friend := GetFriendless()
		name := GetName()
		db.SaveAnimal(name, "–ö—Ä–æ–ª–∏–∫", food, friend, 0)
		return animals.NewRabbit(name, food, friend)

	default:
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.")
		return nil
	}
}
