package tools

import (
	"bufio"
	"fmt"
	animals "main/Animals"
	. "main/service"
	"main/things"
	"os"
	"strconv"
	"strings"
)

var items []MenuItem
var scanner *bufio.Scanner

func init() {
	scanner = bufio.NewScanner(os.Stdin)
}

func WriteConsole() {
	if items == nil {
		items = ReadFile("ru")
	}

	for {
		showMenu()
		choice := getUserChoice()

		if choice == len(items)+1 {
			fmt.Println("\n‚ùå –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
			break
		}

		if choice > 0 && choice <= len(items) {
			SearchFunction(items[choice-1].Key)
		} else {
			fmt.Println("\n‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}
	}
}

func showMenu() {
	fmt.Println("\n================ZOO================")
	for i, item := range items {
		fmt.Printf("%d) %s\n", i+1, item.Text)
	}
	fmt.Println("====================================")
}

func getUserChoice() int {
	fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ")
	scanner.Scan()
	input := scanner.Text()

	choice, err := strconv.Atoi(strings.TrimSpace(input))
	if err != nil {
		return -1
	}
	return choice
}

func waitForEnter() {
	fmt.Print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
	scanner.Scan()
}

func SearchFunction(keyFunction string) {
	switch keyFunction {
	case "add":
		GetAnimal()
	case "addThing":
		GetThing()

	case "allAnimal":
		WriteAllAnimal()
		waitForEnter()
	case "handAnimal":
		WriteAllHandAnimal()
		waitForEnter()
	case "allZoo":
		WriteAllInventory()
		waitForEnter()
	case "changeLanguage":
		changeLanguage()
	case "exit":
		os.Exit(0)
	default:
		fmt.Println("\n‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
		waitForEnter()
	}
}

func changeLanguage() {
	fmt.Println("\nüåê –°–º–µ–Ω–∞ —è–∑—ã–∫–∞")
	fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: ru, en, ch")
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫: ")

	scanner.Scan()
	language := strings.TrimSpace(scanner.Text())

	newItems := ReadFile(language)
	if newItems != nil {
		items = newItems
		fmt.Printf("‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '%s'\n", language)
	} else {
		fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫ '%s'. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π.\n", language)
	}
	waitForEnter()
}

func GetName() (string, error) {
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: ")
	scanner.Scan()
	name := strings.TrimSpace(scanner.Text())
	if name == "" {
		return "", fmt.Errorf("‚ùå –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}
	return name, nil
}

func GetValidFood() (int, error) {
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥—ã: ")
	scanner.Scan()
	input := strings.TrimSpace(scanner.Text())
	value, err := strconv.Atoi(input)
	if err != nil || value <= 0 {
		return 0, fmt.Errorf("‚ùå –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥—ã")
	}
	return value, nil
}

func GetFriendless() (int, error) {
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏ (0‚Äì10): ")
	scanner.Scan()
	input := strings.TrimSpace(scanner.Text())
	value, err := strconv.Atoi(input)
	if err != nil || value < 0 || value > 10 {
		return 0, fmt.Errorf("‚ùå –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏")
	}
	return value, nil
}

func GetAnimal() {
	fmt.Println("\nüêí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ")
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–û–±–µ–∑—å—è–Ω–∞, –¢–∏–≥—Ä, –í–æ–ª–∫, –ö—Ä–æ–ª–∏–∫): ")
	scanner.Scan()
	animalType := strings.TrimSpace(scanner.Text())
	switch animalType {
	case "–û–±–µ–∑—å—è–Ω–∞":
		food, err := GetValidFood()
		if handleErr(err) {
			return
		}

		friend, err := GetFriendless()
		if handleErr(err) {
			return
		}

		name, err := GetName()
		if handleErr(err) {
			return
		}

		monkey := animals.NewMonkey(name, food, friend, Zoo.GetCountAllInventory()+1)
		Zoo.AddAnimal(monkey)
		fmt.Println("‚úÖ –û–±–µ–∑—å—è–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

	case "–¢–∏–≥—Ä":
		food, err := GetValidFood()
		if handleErr(err) {
			return
		}

		name, err := GetName()
		if handleErr(err) {
			return
		}

		tiger := animals.NewTiger(name, food, 0, Zoo.GetCountAllInventory()+1)
		Zoo.AddAnimal(tiger)
		fmt.Println("‚úÖ –¢–∏–≥—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

	case "–í–æ–ª–∫":
		food, err := GetValidFood()
		if handleErr(err) {
			return
		}

		name, err := GetName()
		if handleErr(err) {
			return
		}

		wolf := animals.NewWolf(name, food, 0, Zoo.GetCountAllInventory()+1)
		Zoo.AddAnimal(wolf)
		fmt.Println("‚úÖ –í–æ–ª–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

	case "–ö—Ä–æ–ª–∏–∫":
		food, err := GetValidFood()
		if handleErr(err) {
			return
		}

		friend, err := GetFriendless()
		if handleErr(err) {
			return
		}

		name, err := GetName()
		if handleErr(err) {
			return
		}

		rabbit := animals.NewRabbit(name, food, friend, Zoo.GetCountAllInventory()+1)
		Zoo.AddAnimal(rabbit)
		fmt.Println("‚úÖ –ö—Ä–æ–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

	default:
		fmt.Println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	waitForEnter()
}

func handleErr(err error) bool {
	if err != nil {
		fmt.Println(err)
		waitForEnter()
		return true
	}
	return false
}

func WriteAllAnimal() {
	fmt.Print("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: ", len(Zoo.GetAllAnimals()), "\n")
	fmt.Print("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–π –µ–¥—ã: ", Zoo.CountFood(), "\n")
	for i, animal := range Zoo.GetAllAnimals() {
		fmt.Println(strconv.Itoa(i+1) + ") " + animal.ToString())
	}

}
func WriteAllHandAnimal() {
	fmt.Print("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ: ", len(Zoo.GetAllHandAnimal()), "\n")
	handAnimals := Zoo.GetAllHandAnimal()

	for i, animal := range handAnimals {
		if animal.Friendliness() > 5 {
			fmt.Println(strconv.Itoa(i+1) + ") " + animal.ToString())
		}
	}

}

func GetThing() {
	fmt.Println("\nüì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
	fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ (Computer, Table, Thing): ")
	scanner.Scan()
	thingType := strings.TrimSpace(scanner.Text())

	invNumber := Zoo.GetCountAllInventory() + 1

	switch thingType {
	case "Computer":
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å: ")
		scanner.Scan()
		model := strings.TrimSpace(scanner.Text())

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º RAM (–ì–ë): ")
		scanner.Scan()
		ram, err := strconv.Atoi(strings.TrimSpace(scanner.Text()))
		if err != nil {
			fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ RAM")
			return
		}

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ CPU: ")
		scanner.Scan()
		cpu := strings.TrimSpace(scanner.Text())

		computer := things.NewComputer(invNumber, model, ram, cpu)
		Zoo.AddInventory(computer)
		fmt.Println("‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

	case "Table":
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª: ")
		scanner.Scan()
		material := strings.TrimSpace(scanner.Text())

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç: ")
		scanner.Scan()
		color := strings.TrimSpace(scanner.Text())

		table := things.NewTable(invNumber, material, color)
		Zoo.AddInventory(table)
		fmt.Println("‚úÖ –°—Ç–æ–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

	case "Thing":
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ")
		scanner.Scan()
		name := strings.TrimSpace(scanner.Text())

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥): ")
		scanner.Scan()
		weight, err := strconv.ParseFloat(strings.TrimSpace(scanner.Text()), 64)
		if err != nil {
			fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –≤–µ—Å–∞")
			return
		}

		thing := things.NewThing(invNumber, name, weight)
		Zoo.AddInventory(thing)
		fmt.Println("‚úÖ –í–µ—â—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

	default:
		fmt.Println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}
	waitForEnter()
}

func WriteAllInventory() {
	fmt.Println("–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∑–æ–æ–ø–∞—Ä–∫–∞: ", len(Zoo.GetAllInventory()))
	for i, stuff := range Zoo.GetAllInventory() {
		fmt.Println(strconv.Itoa(i+1), stuff.ToString())
	}
}
