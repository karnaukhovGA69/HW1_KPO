package tools

import (
	"fmt"
	animals "main/Animals"
)

func (c *Console) GetAnimal() {
	fmt.Println("\nüêí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ")
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–û–±–µ–∑—å—è–Ω–∞, –¢–∏–≥—Ä, –í–æ–ª–∫, –ö—Ä–æ–ª–∏–∫): ")
	c.in.Scan()
	animalType := c.in.Text()
	animalType = stringsTrimSpace(animalType)

	// 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —á–µ—Ä–µ–∑ –∫–ª–∏–Ω–∏–∫—É
	health, err := c.GetHealthLevel()
	if c.handleErr(err) {
		return
	}
	if ok, reason := c.Vet.CheckHealth(health); !ok {
		fmt.Println("‚ùå –û—Ç–∫–∞–∑ –∫–ª–∏–Ω–∏–∫–∏:", reason)
		c.waitForEnter()
		return
	}

	// 2) —Å–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
	invNumber := c.Zoo.NextInventoryNumber()

	switch animalType {
	case "–û–±–µ–∑—å—è–Ω–∞":
		food, err := c.GetValidFood()
		if c.handleErr(err) {
			return
		}
		friend, err := c.GetFriendless()
		if c.handleErr(err) {
			return
		}
		name, err := c.GetName()
		if c.handleErr(err) {
			return
		}
		monkey := animals.NewMonkey(name, food, friend, invNumber)
		c.Zoo.Admit(monkey)
		fmt.Println("‚úÖ –û–±–µ–∑—å—è–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

	case "–¢–∏–≥—Ä":
		food, err := c.GetValidFood()
		if c.handleErr(err) {
			return
		}
		name, err := c.GetName()
		if c.handleErr(err) {
			return
		}
		tiger := animals.NewTiger(name, food, invNumber)
		c.Zoo.Admit(tiger)
		fmt.Println("‚úÖ –¢–∏–≥—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

	case "–í–æ–ª–∫":
		food, err := c.GetValidFood()
		if c.handleErr(err) {
			return
		}
		name, err := c.GetName()
		if c.handleErr(err) {
			return
		}
		wolf := animals.NewWolf(name, food, invNumber)
		c.Zoo.Admit(wolf)
		fmt.Println("‚úÖ –í–æ–ª–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

	case "–ö—Ä–æ–ª–∏–∫":
		food, err := c.GetValidFood()
		if c.handleErr(err) {
			return
		}
		friend, err := c.GetFriendless()
		if c.handleErr(err) {
			return
		}
		name, err := c.GetName()
		if c.handleErr(err) {
			return
		}
		rabbit := animals.NewRabbit(name, food, friend, invNumber)
		c.Zoo.Admit(rabbit)
		fmt.Println("‚úÖ –ö—Ä–æ–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

	default:
		fmt.Println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	c.waitForEnter()
}

// –º–∞–ª–µ–Ω—å–∫–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —á—Ç–æ–±—ã –Ω–µ —Ç–∞—â–∏—Ç—å strings –≤ –∏–º–ø–æ—Ä—Ç
func stringsTrimSpace(s string) string {
	i := 0
	j := len(s)
	for i < j && (s[i] == ' ' || s[i] == '\t' || s[i] == '\n' || s[i] == '\r') {
		i++
	}
	for j > i && (s[j-1] == ' ' || s[j-1] == '\t' || s[j-1] == '\n' || s[j-1] == '\r') {
		j--
	}
	return s[i:j]
}
