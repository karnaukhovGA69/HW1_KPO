package tools

import (
	"fmt"
	"main/things"
	"strconv"
	"strings"
)

func (c *Console) GetThing() {
	fmt.Println("\nüì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
	fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ (Computer, Table, Thing): ")
	c.in.Scan()
	thingType := strings.TrimSpace(c.in.Text())

	invNumber := c.Zoo.NextInventoryNumber()

	switch thingType {
	case "Computer":
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å: ")
		c.in.Scan()
		model := strings.TrimSpace(c.in.Text())

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º RAM (–ì–ë): ")
		c.in.Scan()
		ram, err := strconv.Atoi(strings.TrimSpace(c.in.Text()))
		if err != nil {
			fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ RAM")
			return
		}

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ CPU: ")
		c.in.Scan()
		cpu := strings.TrimSpace(c.in.Text())

		computer := things.NewComputer(invNumber, model, ram, cpu)
		c.Zoo.AddInventory(computer)
		fmt.Println("‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

	case "Table":
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª: ")
		c.in.Scan()
		material := strings.TrimSpace(c.in.Text())

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç: ")
		c.in.Scan()
		color := strings.TrimSpace(c.in.Text())

		table := things.NewTable(invNumber, material, color)
		c.Zoo.AddInventory(table)
		fmt.Println("‚úÖ –°—Ç–æ–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

	case "Thing":
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ")
		c.in.Scan()
		name := strings.TrimSpace(c.in.Text())

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥): ")
		c.in.Scan()
		weight, err := strconv.ParseFloat(strings.TrimSpace(c.in.Text()), 64)
		if err != nil {
			fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –≤–µ—Å–∞")
			return
		}

		thing := things.NewThing(invNumber, name, weight)
		c.Zoo.AddInventory(thing)
		fmt.Println("‚úÖ –í–µ—â—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

	default:
		fmt.Println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}
	c.waitForEnter()
}
